// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Assignment {
  id            Int         @id @default(autoincrement()) @map("_id")
  environment   Environment? @relation(fields: [environment_id], references: [id])
  environment_id Int?
  professor     Professor?  @relation(fields: [professor_id], references: [id])
  professor_id  Int?
}

model Attendance {
  id              Int       @id @default(autoincrement()) @map("_id")
  student         Student?   @relation(fields: [student_id], references: [id])
  student_id      Int?
  professor       Professor? @relation(fields: [professor_id], references: [id])
  professor_id    Int?
  subject         Subject?   @relation(fields: [subject_id], references: [id])
  subject_id      Int?
  attendance      String?    @db.Char(10)
  attendance_date DateTime?
  management      Management? @relation(fields: [management_id], references: [id])
  management_id   Int?
  quarter         String?    
}

model Category {
  id       Int      @id @default(autoincrement()) @map("_id")
  category String?  
  contents Content[]
}

model Content {
  id            Int       @id @default(autoincrement()) @map("_id")
  environment   Environment? @relation(fields: [environment_id], references: [id])
  environment_id Int?
  subject       Subject?   @relation(fields: [subject_id], references: [id])
  subject_id    Int?
  category      Category?  @relation(fields: [category_id], references: [id])
  category_id   Int?
}

model Course {
  id          Int         @id @default(autoincrement()) @map("_id")
  parallel    String?     @db.Char(10)
  course      String?     
  last_update DateTime?
  degree      Degree?     @relation(fields: [degree_id], references: [id])
  degree_id   Int?
  environments Environment[]
  subjects    Subject[]
}

model Degree {
  id     Int     @id @default(autoincrement()) @map("_id")
  degree String? 
  courses Course[]
}

model Departament {
  id          Int        @id @default(autoincrement()) @map("_id")
  departament String?    
  province    Province?  @relation(fields: [province_id], references: [id])
  province_id Int?
  persons     Person[]
}

model Dimension {
  id        Int     @id @default(autoincrement()) @map("_id")
  dimension String? 
  value     Int?
  taskAssignments TaskAssignment[]
}

model Environment {
  id            Int       @id @default(autoincrement()) @map("_id")
  management    Management? @relation(fields: [management_id], references: [id])
  management_id Int?
  course        Course?   @relation(fields: [course_id], references: [id])
  course_id     Int?
  status        Int?
  assignments   Assignment[]
  contents      Content[]
  gradeSubjects GradeSubject[]
  registrations Registration[]
}

model GradeSubject {
  id            Int       @id @default(autoincrement()) @map("_id")
  student       Student?  @relation(fields: [student_id], references: [id])
  student_id    Int?
  environment   Environment? @relation(fields: [environment_id], references: [id])
  environment_id Int?
  subject       Subject?  @relation(fields: [subject_id], references: [id])
  subject_id    Int?
  grade         Int?
  quarter       String?   
}

model Management {
  id                   Int       @id @default(autoincrement()) @map("_id")
  management           Int?
  status               Int?
  start_date           DateTime?
  end_date             DateTime?
  first_quarter_start  DateTime?
  first_quarter_end    DateTime?
  second_quarter_start DateTime?
  second_quarter_end   String?   @db.Char(10)
  third_quarter_start  String?   @db.Char(10)
  third_quarter_end    String?   @db.Char(10)
  environments         Environment[]
  attendances         Attendance[]
  taskAssignments     TaskAssignment[]
}

model Person {
  id               Int        @id @default(autoincrement()) @map("_id")
  name             String?    
  lastname         String?    
  second_lastname  String?    
  gender           String?    @db.Char(10)
  ci               String?    
  birth_date       DateTime?
  email            String?    
  status           Int?
  departament      Departament? @relation(fields: [departament_id], references: [id])
  departament_id   Int?
  professors       Professor[]
  students         Student[]
  tutors           Tutor[]
}

model Professor {
  id          Int       @id @default(autoincrement()) @map("_id")
  is_tecnical Int?
  subjects    String?   
  status      Int?
  person      Person?   @relation(fields: [person_id], references: [id])
  person_id   Int?
  assignments Assignment[]
  attendances Attendance[]
  taskAssignments TaskAssignment[]
}

model Province {
  id           Int          @id @default(autoincrement()) @map("_id")
  province     String?      
  town         Town?        @relation(fields: [town_id], references: [id])
  town_id      Int?
  departaments Departament[]
}

model Quarter {
  id            Int       @id @default(autoincrement()) @map("_id")
  first_start   DateTime?
  first_end     DateTime?
  second_start  DateTime?
  second_end    DateTime?
  third_start   DateTime?
  third_end     DateTime?
}

model Registration {
  id            Int       @id @default(autoincrement()) @map("_id")
  environment   Environment? @relation(fields: [environment_id], references: [id])
  environment_id Int?
  student       Student?    @relation(fields: [student_id], references: [id])
  student_id    Int?
}

model Setting {
  id                Int     @id @default(autoincrement())
  institution_logo  String? 
  institution_name  String? 
  active_management Int?
  tutor_access      Int?
  active_quarter    String? 
}

model Student {
  id        Int       @id @default(autoincrement()) @map("_id")
  matricula String?   
  rude      Int?
  tutor     Tutor?    @relation("TutorMainStudent", fields: [tutor_id], references: [id])
  tutor_id  Int?      @unique
  tutors    Tutor[]   @relation("TutorAdditionalStudents")
  person    Person?   @relation(fields: [person_id], references: [id])
  person_id Int?
  total     Int?
  attendances Attendance[]
  gradeSubjects GradeSubject[]
  registrations Registration[]
  taskAssignments TaskAssignment[]
}

model Subject {
  id          Int       @id @default(autoincrement()) @map("_id")
  subject     String?   
  is_tecnical Int?
  course      Course?   @relation(fields: [course_id], references: [id])
  course_id   Int?
  attendances Attendance[]
  contents    Content[]
  gradeSubjects GradeSubject[]
  taskAssignments TaskAssignment[]
}

model TaskAssignment {
  id               Int       @id @default(autoincrement()) @map("_id")
  student          Student?  @relation(fields: [student_id], references: [id])
  student_id       Int?
  professor        Professor? @relation(fields: [professor_id], references: [id])
  professor_id     Int?
  subject          Subject?  @relation(fields: [subject_id], references: [id])
  subject_id       Int?
  dimension        Dimension? @relation(fields: [dimension_id], references: [id])
  dimension_id     Int?
  is_autoevaluation Int?
  management       Management? @relation(fields: [management_id], references: [id])
  management_id    Int?
  qualification    String?   @db.Char(10)
  weight           Int?
  description      String?   
  name             String?   
  create_date      DateTime?
  last_update      DateTime?
  start_date       DateTime?
  end_date         DateTime?
  quarter          String?   
}

model Town {
  id      Int      @id @default(autoincrement()) @map("_id")
  town    String?  
  provinces Province[]
}

model Tutor {
  id        Int      @id @default(autoincrement()) @map("id_")
  student   Student? @relation("TutorMainStudent")
  student_id Int?    @unique
  status    Int?
  person    Person?  @relation(fields: [person_id], references: [id])
  person_id Int?
  students  Student[] @relation("TutorAdditionalStudents")
}


